df1 = read_excel("G:/My Drive/SPRING 2024/EXST7152/Midterm Project/Data/DD_CompetitiveCareer_02_25_2023.xlsx")
df1 = df1 %>%
mutate(across(c("Agent", "Map","Results","Placement", "AverageRankofMatch"), as.factor))
df1 = df1[,-which(names(df1)=="Match Score")]
df1 =  df1[df1$Results != "D", ]
df1$Results <- droplevels(df1$Results)
df1$Results <- ifelse(df1$Results == "W", 1, 0)
df1$Results = as.factor(df1$Results)
df1$Date <- as.Date(df1$Date)
df2 = df1[c("Results", setdiff(names(df1), "Results"))]
agent_titles = names(df2$Agent)
agent_titles = levels(df2$Agent)
knitr::opts_chunk$set(echo = TRUE, fig.width = 6, fig.height = 4)
variable_titles <- list(Q1 = "Q1: Construction Work Experience in High School",
Q2 = "Q2: Months of Volunteer Experience Before Construction Program",
Q3 = "Q3: Months of Paid Experience Before Construction Program",
Q4_1 = "Q4_1: Opinion - A career in the skilled construction trades is prestigious",
Q4_3 = "Q4_3: Opinion - A career in the skilled construction trades pays better than a non-construction job",
Q4_6 = "Q4_6: Opinion - A career in the skilled construction trades was my first career choice",
Q4_8 = "Q4_8: Opinion - A career in the skilled construction trades benefits society",
Q4_9 = "Q4_9: Opinion - A career in the skilled construction trades has room for advancement",
Q5_1 = "Q5_1: Influence - Interest in Construction",
Q5_2 = "Q5_2: Influence - Hands on work activities",
Q5_3 = "Q5_3: Influence - Work/Volunteer experience",
Q5_4 = "Q5_4: Influence - A work day that is not predominately centered in a traditional office environment",
Q5_6 = "Q5_6: Influence - Construction is a family business",
Q5_5 = "Q5_5: Influence - Construction industry outlook",
Q6_1 = "Q6_1: Influence - Mother/Step-Mother",
Q6_2 = "Q6_2: Influence - Father/Step-Father",
Q6_3 = "Q6_3: Influence - Brother/Sister/Step-Brother/Step-Sister",
Q6_4 = "Q6_4: Influence - Aunt, Uncle, Cousin",
Q6_5 = "Q6_5: Influence - Other Relative",
Q6_6 = "Q6_6: Influence - College Friend",
Q6_7 = "Q6_7: Influence - High School Friend",
Q6_8 = "Q6_8: Influence - Teacher",
Q6_9 = "Q6_9: Influence - College Advisor",
Q6_10 = "Q6_10: Influence - High School Guidance Counselor",
Q6_11 = "Q6_11: Influence - Work Supervisor",
Q6_12 = "Q6_12: Influence - Co-Worker",
Q6_13 = "Q6_13: Influence - Significant Other (Husband/Wife/BF/GF)",
Q7 = "Q7: Do you have a mentor, either formal or informal?",
Q7.1 = "Q7.1: If the answer to the previous is yes, please identify the person whom you consider a mentor",
Q8 = "Q8: What gender is your mentor identified in the previous questions?",
Q9 = "Q9: Does the mentor identified work in the construction industry?",
Q10 = "Q10: Do you have a role model?",
Q10.1 = "Q10.1: If answer to previous question is yes please identify the person whom you consider a role model",
Q11 = "Q11: What is the gender of the role model identified in previous questions?",
Q12 = "Q12: Does the role model identified work in the construction industry?",
Q13 = "Q13: Age Range",
Q14 = "Q14: Gender",
Q15 = "Q15: What size city did you attend high school in?",
Q16 = "Q16: Ethnicity"
)
map_titles = levels(df2$Map)
install.packages("shinythemes")
library(easypackages)
libraries("readxl", "ggplot2","tidyverse", "shiny", "shinythmes")
n=length(df2)
N = nrow(df2)
set.seed(1)
index <- sample(1:N, size = N*.8, replace = F)
train_x <- df2[index, 2:n]
test_x <- df2[-index, 2:n]
train_y <- df2[index, 1]
test_y <- df2[-index, 1]
train <- df2[index,]
test <- df2[-index,]
rf_model <- randomForest(Results~.,data = train, xtest = test_x,
ytest=test_y$Results, mtry = optimal.m, nodesize = optimal.depth,
ntree=optimal.ntrees, keep.forest = TRUE)
library(easypackages)
libraries("readxl", "ggplot2","tidyverse", "shiny", "shinythmes", "randomForest")
n=length(df2)
N = nrow(df2)
set.seed(1)
index <- sample(1:N, size = N*.8, replace = F)
train_x <- df2[index, 2:n]
test_x <- df2[-index, 2:n]
train_y <- df2[index, 1]
test_y <- df2[-index, 1]
train <- df2[index,]
test <- df2[-index,]
rf_model <- randomForest(Results~.,data = train, xtest = test_x,
ytest=test_y$Results, mtry = optimal.m, nodesize = optimal.depth,
ntree=optimal.ntrees, keep.forest = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(easypackages)
libraries("readxl", "ggplot2","tidyverse", "shiny", "shinythmes", "randomForest")
df1 = read_excel("G:/My Drive/SPRING 2024/EXST7152/Midterm Project/Data/DD_CompetitiveCareer_02_25_2023.xlsx")
df1 = df1 %>%
mutate(across(c("Agent", "Map","Results","Placement", "AverageRankofMatch"), as.factor))
df1 = df1[,-which(names(df1)=="Match Score")]
df1 =  df1[df1$Results != "D", ]
df1$Results <- droplevels(df1$Results)
df1$Results <- ifelse(df1$Results == "W", 1, 0)
df1$Results = as.factor(df1$Results)
df1$Date <- as.Date(df1$Date)
df2 = df1[c("Results", setdiff(names(df1), "Results"))]
n=length(df2)
N = nrow(df2)
trees <- seq(from = 200, to = 1000, by = 100)
z <- length(trees)
rf.max.auc1 <- vector(mode = "numeric", length = z)
N = nrow(df2)
for (i in 1:z) {
set.seed(1)
index <- sample(1:N, size = N*.8, replace = F)
train_x <- df2[index, 2:n]
test_x <- df2[-index, 2:n]
train_y <- df2[index, 1]
test_y <- df2[-index, 1]
train <- df2[index,]
test <- df2[-index,]
rf_model1 <- randomForest(Results~.,data = train, xtest = test_x,
ytest=test_y$Results,ntree=trees[i], keep.forest = TRUE)
rf_predicted_class1 <- rf_model1$test$predicted
rf.max.auc1[i] <- max(auc(roc(rf_predicted_class1,test_y$Results)))
}
library(easypackages)
libraries("readxl", "ggplot2","tidyverse", "shiny", "shinythmes", "randomForest","AUC")
knitr::opts_chunk$set(echo = TRUE)
library(easypackages)
libraries("readxl", "ggplot2","tidyverse", "shiny", "shinythmes", "randomForest","AUC")
df1 = read_excel("G:/My Drive/SPRING 2024/EXST7152/Midterm Project/Data/DD_CompetitiveCareer_02_25_2023.xlsx")
df1 = df1 %>%
mutate(across(c("Agent", "Map","Results","Placement", "AverageRankofMatch"), as.factor))
df1 = df1[,-which(names(df1)=="Match Score")]
df1 =  df1[df1$Results != "D", ]
df1$Results <- droplevels(df1$Results)
df1$Results <- ifelse(df1$Results == "W", 1, 0)
df1$Results = as.factor(df1$Results)
df1$Date <- as.Date(df1$Date)
df2 = df1[c("Results", setdiff(names(df1), "Results"))]
n=length(df2)
N = nrow(df2)
trees <- seq(from = 200, to = 1000, by = 100)
z <- length(trees)
rf.max.auc1 <- vector(mode = "numeric", length = z)
N = nrow(df2)
for (i in 1:z) {
set.seed(1)
index <- sample(1:N, size = N*.8, replace = F)
train_x <- df2[index, 2:n]
test_x <- df2[-index, 2:n]
train_y <- df2[index, 1]
test_y <- df2[-index, 1]
train <- df2[index,]
test <- df2[-index,]
rf_model1 <- randomForest(Results~.,data = train, xtest = test_x,
ytest=test_y$Results,ntree=trees[i], keep.forest = TRUE)
rf_predicted_class1 <- rf_model1$test$predicted
rf.max.auc1[i] <- max(auc(roc(rf_predicted_class1,test_y$Results)))
}
optimal.ntrees <- trees[which.max(rf.max.auc1)]
plot(trees, rf.max.auc1, type = "b", xlab = "ntrees", ylab = "AUC Scores")
m <- seq(from = 4, to = 20, by = 1)
h <- length(m)
rf.max.auc2 <- vector(mode = "numeric", length = h)
for (i in 1:h) {
set.seed(1)
index <- sample(1:N, size = N*.8, replace = F)
train_x <- df2[index, 2:n]
test_x <- df2[-index, 2:n]
train_y <- df2[index, 1]
test_y <- df2[-index, 1]
train <- df2[index,]
test <- df2[-index,]
rf_model2 <- randomForest(Results~.,data = train, xtest = test_x,
ytest=test_y$Results, mtry = m[i],
ntree=optimal.ntrees, keep.forest = TRUE)
rf_predicted_class2 <- rf_model2$test$predicted
rf.max.auc2[i] <- max(auc(roc(rf_predicted_class2,test_y$Results)))
}
optimal.m <- m[which.max(rf.max.auc2)]
depth <- seq(from = 1, to = 200, by = 1)
d <- length(depth)
rf.max.auc3 <- vector(mode = "numeric", length = d)
for (i in 1:d) {
set.seed(1)
index <- sample(1:N, size = N*.8, replace = F)
train_x <- df2[index, 2:n]
test_x <- df2[-index, 2:n]
train_y <- df2[index, 1]
test_y <- df2[-index, 1]
train <- df2[index,]
test <- df2[-index,]
rf_model3 <- randomForest(Results~.,data = train, xtest = test_x,
ytest=test_y$Results, mtry = optimal.m, nodesize = depth[i],
ntree=optimal.ntrees, keep.forest = TRUE)
rf_predicted_class3 <- rf_model3$test$predicted
rf.max.auc3[i] <- max(auc(roc(rf_predicted_class3,test_y$Results)))
}
optimal.depth <- depth[which.max(rf.max.auc3)]
set.seed(1)
index <- sample(1:N, size = N*.8, replace = F)
train_x <- df2[index, 2:n]
test_x <- df2[-index, 2:n]
train_y <- df2[index, 1]
test_y <- df2[-index, 1]
train <- df2[index,]
test <- df2[-index,]
rf_model <- randomForest(Results~.,data = train, xtest = test_x,
ytest=test_y$Results, mtry = optimal.m, nodesize = optimal.depth,
ntree=optimal.ntrees, keep.forest = TRUE)
rf_predicted_class <- rf_model$test$predicted
rf_error <- table(actual = test_y$Results, predicted = rf_predicted_class)
rf_misclass_rate <- 1-sum(diag(rf_error))/sum(rf_error)
rf_auc <- auc(roc(rf_predicted_class,test_y$Results))
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("agent", "Choose Agent:", choices = unique(df2$agent)),
selectInput("map", "Choose Map:", choices = unique(df2$map)),
actionButton("predictButton", "Predict")
),
mainPanel(
tableOutput("predictionTable")
)
)
)
# Server part
server <- function(input, output) {
# Function to generate the prediction table
generatePredictionTable <- function(agent, map) {
# Filter the dataset based on the selected agent and map
filtered_data <- df2[df2$agent == agent & df2$map == map, ]
# Use the trained random forest model to make predictions
rf_predicted <- predict(rf_model, newdata = filtered_data)
# Get the probability of each class
rf_probs <- predict(rf_model, newdata = filtered_data, type = "prob")
# Create a data frame with the predictions and probabilities
prediction_data <- data.frame(
Agent = filtered_data$agent,
Map = filtered_data$map,
Predicted_Class = rf_predicted,
Probability_Class_1 = rf_probs[, "1"],  # Probability of class 1
Probability_Class_2 = rf_probs[, "2"]   # Probability of class 2
)
# Return the prediction data frame
return(prediction_data)
}
# Event handler for the predict button
observeEvent(input$predictButton, {
agent <- input$agent
map <- input$map
# Generate the prediction table
prediction_data <- generatePredictionTable(agent, map)
# Show the prediction table
output$predictionTable <- renderTable({
prediction_data
})
})
}
# Run the Shiny app
shinyApp(ui, server)
unique(df2$Map)
library(easypackages)
libraries("readxl", "ggplot2","tidyverse", "shiny", "shinythemes", "randomForest","AUC")
ui <- fluidPage(theme = shinytheme("cyborg"),
sidebarLayout(
sidebarPanel(
selectInput("agent", "Choose Agent:", choices = levels(df2$Agent)),
selectInput("map", "Choose Map:", choices = levels(df2$Map)),
actionButton("predictButton", "Predict!")
),
mainPanel(
tableOutput("predictionTable")
)
)
)
# Server part
server <- function(input, output) {
# Function to generate the prediction table
generatePredictionTable <- function(agent, map) {
# Filter the dataset based on the selected agent and map
filtered_data <- df2[df2$Agent == agent & df2$Map == map, ]
# Use the trained random forest model to make predictions
rf_predicted <- predict(rf_model, newdata = filtered_data)
# Get the probability of each class
rf_probs <- predict(rf_model, newdata = filtered_data, type = "prob")
# Create a data frame with the predictions and probabilities
prediction_data <- data.frame(
Agent = filtered_data$agent,
Map = filtered_data$map,
Predicted_Class = rf_predicted,
Probability_Class_1 = rf_probs[, "0"],  # Probability of class 1
Probability_Class_2 = rf_probs[, "1"]   # Probability of class 2
)
# Return the prediction data frame
return(prediction_data)
}
# Event handler for the predict button
observeEvent(input$predictButton, {
agent <- input$agent
map <- input$map
# Generate the prediction table
prediction_data <- generatePredictionTable(agent, map)
# Show the prediction table
output$predictionTable <- renderTable({
prediction_data
})
})
}
# Run the Shiny app
shinyApp(ui, server)
filtered_data <- df2[df2$agent == agent & df2$map == map, ]
filtered_data <- df2[df2$Agent == agent & df2$Map == map, ]
filtered_data <- df2[df2$Agent == agent & df2$Map == map, ]
filtered_data <- df2[df2$Agent == Agent & df2$Map == Map, ]
install.packages("DT")
library(easypackages)
libraries("readxl", "ggplot2","tidyverse", "shiny", "shinythemes", "randomForest","AUC", "DT")
ui <- fluidPage(theme = shinytheme("cyborg"),
sidebarLayout(
sidebarPanel(
selectInput("agent", "Choose Agent:", choices = levels(df$agent)),
selectInput("map", "Choose Map:", choices = levels(df$map))
),
mainPanel(
DTOutput("prediction_table")
)
)
)
# Server function
server <- function(input, output) {
output$prediction_table <- renderDT({
# Filter the data based on the selected agent and map
filtered_data <- df[df$agent == input$agent & df$map == input$map, ]
# Check if any rows match the selection
if (nrow(filtered_data) > 0) {
# Predict using the random forest model
rf_model <- randomForest(response_variable ~ ., data = filtered_data)
predictions <- predict(rf_model, filtered_data, type = "response")
# Create the prediction table with agent, map, predicted class, and probability
prediction_table <- data.frame(
Agent = filtered_data$agent,
Map = filtered_data$map,
Predicted_Class = predictions,
Probability = rf_model$predicted
)
# Return the prediction table as a DataTable
datatable(prediction_table)
} else {
# Return a message if no matching data is found
"No data available for the selected agent and map."
}
})
}
# Run the Shiny app
shinyApp(ui, server)
ui <- fluidPage(theme = shinytheme("cyborg"),
sidebarLayout(
sidebarPanel(
selectInput("agent", "Choose Agent:", choices = levels(df2$Agent)),
selectInput("map", "Choose Map:", choices = levels(df2$Map))
),
mainPanel(
DTOutput("prediction_table")
)
)
)
# Server function
server <- function(input, output) {
output$prediction_table <- renderDT({
# Filter the data based on the selected agent and map
filtered_data <- df2[df2$agent == input$agent & df2$map == input$map, ]
# Check if any rows match the selection
if (nrow(filtered_data) > 0) {
# Predict using the random forest model
rf_model <- randomForest(response_variable ~ ., data = filtered_data)
predictions <- predict(rf_model, filtered_data, type = "response")
# Create the prediction table with agent, map, predicted class, and probability
prediction_table <- data.frame(
Agent = filtered_data$agent,
Map = filtered_data$map,
Predicted_Class = predictions,
Probability = rf_model$predicted
)
# Return the prediction table as a DataTable
datatable(prediction_table)
} else {
# Return a message if no matching data is found
"No data available for the selected agent and map."
}
})
}
# Run the Shiny app
shinyApp(ui, server)
ui <- fluidPage(theme = shinytheme("cyborg"),
sidebarLayout(
sidebarPanel(
selectInput("agent", "Choose Agent:", choices = levels(df$agent)),
selectInput("map", "Choose Map:", choices = levels(df$map)),
actionButton("predict_button", "Predict")
),
mainPanel(
DTOutput("prediction_table")
)
)
)
# Server function
server <- function(input, output, session) {
# Reactive values for storing prediction results
rv <- reactiveValues(predictions = NULL)
observeEvent(input$predict_button, {
# Filter the data based on the selected agent and map
filtered_data <- df[df$agent == input$agent & df$map == input$map, ]
# Check if any rows match the selection
if (nrow(filtered_data) > 0) {
# Predict using the random forest model
rf_model <- randomForest(response_variable ~ ., data = filtered_data)
predictions <- predict(rf_model, filtered_data, type = "response")
# Create the prediction table with agent, map, predicted class, and probability
prediction_table <- data.frame(
Agent = filtered_data$agent,
Map = filtered_data$map,
Predicted_Class = predictions,
Probability = rf_model$predicted
)
# Store the predictions in reactive values
rv$predictions <- prediction_table
} else {
# Return a message if no matching data is found
rv$predictions <- "No data available for the selected agent and map."
}
})
output$prediction_table <- renderDT({
# Return the prediction table as a DataTable
datatable(rv$predictions)
})
}
# Run the Shiny app
shinyApp(ui, server)
ui <- fluidPage(theme = shinytheme("cyborg"),
sidebarLayout(
sidebarPanel(
selectInput("agent", "Choose Agent:", choices = levels(df2$Agent)),
selectInput("map", "Choose Map:", choices = levels(df2$Map)),
actionButton("predict_button", "Predict")
),
mainPanel(
DTOutput("prediction_table")
)
)
)
# Server function
server <- function(input, output, session) {
# Reactive values for storing prediction results
rv <- reactiveValues(predictions = NULL)
observeEvent(input$predict_button, {
# Filter the data based on the selected agent and map
filtered_data <- df2[df2$Agent == input$Agent & df2$Map == input$Map, ]
# Check if any rows match the selection
if (nrow(filtered_data) > 0) {
# Predict using the random forest model
rf_model <- randomForest(response_variable ~ ., data = filtered_data)
predictions <- predict(rf_model, filtered_data, type = "response")
# Create the prediction table with agent, map, predicted class, and probability
prediction_table <- data.frame(
Agent = filtered_data$agent,
Map = filtered_data$map,
Predicted_Class = predictions,
Probability = rf_model$predicted
)
# Store the predictions in reactive values
rv$predictions <- prediction_table
} else {
# Return a message if no matching data is found
rv$predictions <- "No data available for the selected agent and map."
}
})
output$prediction_table <- renderDT({
# Return the prediction table as a DataTable
datatable(rv$predictions)
})
}
# Run the Shiny app
shinyApp(ui, server)
shiny::runApp('G:/My Drive/SPRING 2024/EXST7152/Midterm Project/Code/Shiny/RF-model')
runApp('G:/My Drive/SPRING 2024/EXST7152/Midterm Project/Code/Shiny/RF-model')
knitr::opts_chunk$set(echo = TRUE)
dm_rf_mod <- rand_forest(mtry = optimal.m, min_n = optimal.depth, trees = optimal.ntrees) %>%
set_engine("ranger", num.threads = 8) %>%
set_mode("classification")
library(easypackages)
libraries("readxl", "ggplot2","tidyverse", "shiny", "shinythemes", "randomForest","AUC","tidymodels",
"mlbench", "recipes","workflows","ranger")
dm_rf_mod <- rand_forest(mtry = optimal.m, min_n = optimal.depth, trees = optimal.ntrees) %>%
set_engine("ranger", num.threads = 8) %>%
set_mode("classification")
library(easypackages)
libraries("readxl", "ggplot2","tidyverse", "shiny", "shinythemes", "randomForest","AUC","tidymodels",
"mlbench", "recipes","workflows","ranger")
dm_rf_mod <- rand_forest(mtry = optimal.m, min_n = optimal.depth, trees = optimal.ntrees) %>%
set_engine("ranger", num.threads = 8) %>%
set_mode("classification")
library(easypackages)
libraries("readxl", "ggplot2","tidyverse", "shiny", "shinythemes", "randomForest","AUC","tidymodels",
"mlbench", "recipes","workflows","ranger","parsnip")
dm_rf_mod <- rand_forest(mtry = optimal.m, min_n = optimal.depth, trees = optimal.ntrees) %>%
set_engine("ranger", num.threads = 8) %>%
set_mode("classification")
rf_recipe <- recipe(Results ~ ., data = train)
rf_workflow <- workflow() %>%
add_model(dm_rf_mod) %>%
add_recipe(rf_recipe)
rf_fit <- rf_workflow %>%
fit(data = train)
# predict(rf_fit, dm_testing, type = "prob")
# augment(rf_fit, dm_testing)
saveRDS(rf_fit, "rf_model.RDS")
runApp('G:/My Drive/SPRING 2024/EXST7152/Midterm Project/Code/Shiny/RF-model')
